import streamlit as st
import pandas as pd
import numpy as np
import joblib

from src.Hybrid_recommender import HybridRecommender

st.set_page_config(page_title="Dealing with Seasonality in Recommendation Systems", 
                   page_icon="ðŸ§Š")

@st.cache_resource
def init_call():
    hybrid = HybridRecommender()
    return hybrid

@st.cache_resource
def layer1_call(user_ratings):
    global hybrid
    hybrid.layer1(user_ratings)

def layer2_call():
    global hybrid
    recommendations_no_seasonality = hybrid.layer2()
    
    return recommendations_no_seasonality

def layer3_call(month):
    global hybrid
    hybrid.layer3(month)
    
def layer4_call(n):
    global hybrid
    recommendations_with_seasonality = hybrid.layer4(n)
    
    return recommendations_with_seasonality

hybrid = init_call()  
    
movie_dict = joblib.load("src/data/movie_dict.pkl")
movie_df = pd.DataFrame(list(movie_dict.values()), columns=['Movies'])
movie_df['Ratings'] = None
month_dict = {"January":1, "February":2, "March":3, "April":4, "May":5, "June":6, "July":7, "August":8, "September":9, "October":10, "November":11, "December":12}

with st.container():
    st.title("Dealing with Seasonality in Recommendation Systems")
    st.subheader("Final Master Project - Metehan GUNDOGDU")
    st.write("This is a simple proof-of-concept implementation of the hybrid recommendation system architecture proposed in the FMP. ")

with st.form("submit_form"):
    
    st.write("Enter your ratings for the movies available in the table below. Ratings must be between 0.5 and 5.")
    edited_df = st.data_editor(movie_df, 
                            use_container_width=True,
                            hide_index=True, 
                            column_config={"Ratings":st.column_config.NumberColumn(
                                label="Ratings", 
                                min_value=0.5, 
                                max_value=5, 
                                step=0.5, 
                                help="Please enter a rating between 0.5 and 5")})

    st.write("")
    
    st.write("Choose the month to be considered for forecasts:")
    option = st.selectbox(
        'Choose the month to be considered for forecasts:', options=list(month_dict.keys()), label_visibility="collapsed")
    

    #Number of movies to be shown
    st.write("")
    st.write("Enter the number of recommendations to be displayed:")
    num_output = st.slider('Enter the number of recommendations to be displayed:', min_value=1, max_value=100, value=10, label_visibility="collapsed")
    
    st.write("")
    submitted = st.form_submit_button("Get recommendations", type="primary", use_container_width=True)
    if submitted:
                  
        selected_month_int = month_dict.get(option)
        
        df_filled = edited_df[edited_df['Ratings'].notna()]
        if len(df_filled) == 0:
            st.write("Please rate some movies!")
        
        else:
            
            movie_ratings = df_filled.set_index('Movies')['Ratings'].to_dict()
            
            
            with st.spinner("Getting recommendations. Please wait..."):
            
                layer1_call(movie_ratings)
                
                output_no_seasonality = layer2_call()[:num_output]
                output_no_seasonality = pd.DataFrame(output_no_seasonality)
                output_no_seasonality.columns=["Standard Recommendations"]
                
                layer3_call(selected_month_int)
                            
                output_with_seasonality=layer4_call(num_output)
                output_with_seasonality = pd.DataFrame(output_with_seasonality)
                output_with_seasonality.columns=["Hybrid Recommendations"]
                
            
            st.write("The recommendations obtained from a standard recommendation engine built with TFRS can be seen on the left for comparison.")
            st.write("The output recommendations that is generated by the proposed hybrid recommendation system architecture that considers the seasonality based on the demand forecasts done for the selected month can be seen on the right.")
            st.write("The recommendation on top is the most recommended item as these are Top-N recommendations that have a descending order.")
            
            col1, col2 = st.columns(2, gap="medium")
            
            with col1:
                st.header("Recommendations without seasonality")
                st.dataframe(output_no_seasonality, hide_index=True)

            with col2:
                st.header("Recommendations with seasonality")
                st.dataframe(output_with_seasonality, hide_index=True)
       